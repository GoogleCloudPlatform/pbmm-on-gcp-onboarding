pipeline {
  agent {
      label "gcp-agent"
  }

  environment {
    _POLICY_REPO="policy-library"
    _TF_SA_EMAIL="TERRAFORM_SA_EMAIL"
    _STATE_BUCKET_NAME="BACKEND_STATE_BUCKET_NAME"
    _PROJECT_ID="CICD_PROJECT_ID"
  }

  stages {
    stage('setup') {
      steps {
          sh '''
          echo "Setting up gcloud for impersonation"
          gcloud config set auth/impersonate_service_account ${_TF_SA_EMAIL}
          echo "Adding bucket information to backends"
          for i in `find -name 'backend.tf'`; do sed -r -i "s/UPDATE_ME|UPDATE_PROJECTS_BACKEND|UPDATE_APP_INFRA_BUCKET/${_STATE_BUCKET_NAME}/" $i; done
          '''
        }
    }
    stage('TF plan validate all') {
      when {
              not {
                      anyOf {
                      branch 'development'
                      branch 'production'
                      branch 'non-production'
                  }
              }
      }
      steps {
          sh '''
          export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TF_SA_EMAIL}
          ./tf-wrapper.sh plan_validate_all ${BRANCH_NAME} ${WORKSPACE}/${_POLICY_REPO} ${_PROJECT_ID}
          '''
        }
    }
    stage('TF init') {
      when {
              anyOf {
                  branch 'development'
                  branch 'production'
                  branch 'non-production'
              }
      }
      steps {
          sh '''
          export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TF_SA_EMAIL}
          ./tf-wrapper.sh init $BRANCH_NAME
          '''
        }
    }
    stage('TF plan') {
      when {
              anyOf {
                  branch 'development'
                  branch 'production'
                  branch 'non-production'
              }
      }
      steps {
          sh '''
          export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TF_SA_EMAIL}
          ./tf-wrapper.sh plan $BRANCH_NAME
          '''
        }
    }
    stage('TF validate') {
      when {
              anyOf {
                  branch 'development'
                  branch 'production'
                  branch 'non-production'
              }
      }
      steps {
          sh '''
          export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TF_SA_EMAIL}
          ./tf-wrapper.sh validate ${BRANCH_NAME} ${WORKSPACE}/${_POLICY_REPO} ${_PROJECT_ID}
          '''
        }
    }
    // stage('TF wait for approval') {
    //   when {
    //           anyOf {
    //               branch 'development'
    //               branch 'production'
    //               branch 'non-production'
    //           }
    //   }
    //   steps {
    //       script {
    //       def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
    //       }
    //     }
    // }
    stage('TF apply') {
      when {
              anyOf {
                  branch 'development'
                  branch 'production'
                  branch 'non-production'
              }
      }
      steps {
          sh '''
          export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TF_SA_EMAIL}
          ./tf-wrapper.sh apply $BRANCH_NAME
          '''
        }
    }
  }
}
